bool isCyclicBFS(int src, unordered_map<int, bool>& visited, unordered_map<int, list<int>>& adj) {
    unordered_map<int, int> parent;
    parent[src] = -1;
    visited[src] = true;
    queue<int> q;
    q.push(src);
    while (!q.empty()) {
        int front = q.front();
        q.pop();
        for (auto neighbour : adj[front]) {
            if (visited[neighbour] && neighbour != parent[front])
                return true;
            else if (!visited[neighbour]) {
                q.push(neighbour);
                visited[neighbour] = true;
                parent[neighbour] = front; // Update parent only if neighbour is not visited
            }
        }
    }
    return false;
}
